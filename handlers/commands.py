from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
import os
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

router = Router()
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")


@router.message(Command(commands=['start']))
async def start_handler(message: Message, user_tokens, pipeline):
    welcome_text = """
üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≠–º–∏–ª–∏!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. 

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:
`/token –≤–∞—à_—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω`

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞:
‚Ä¢ –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏?
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?
"""
    await message.answer(
        welcome_text,
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['help']))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞."""
    help_text = """
üìö *–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º*

üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
`/start` - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
`/help` - –≠—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
`/token [–≤–∞—à_—Ç–æ–∫–µ–Ω]` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
`/documents` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

üîπ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:*
1. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω:
`/token 12345abcde`

2. –ó–∞—Ç–µ–º –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∞—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:
   ‚Ä¢ –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏?
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?
   ‚Ä¢ –ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ç–∞–π–Ω–µ?

üîπ *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã:*
   ‚Ä¢ –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
   ‚Ä¢ –û—Ç–≤–µ—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""
    await message.answer(
        help_text,
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['token']))
async def token_handler(message: Message, user_tokens, pipeline) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /token."""
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/token –≤–∞—à_—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    token = args[1].strip()
    if token not in pipeline.document_store.list_user_tokens():
        await message.answer(
            "–í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "`/token –≤–∞—à_—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        user_tokens.pop(message.from_user.id, None)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if isinstance(user_tokens.get(message.from_user.id), dict):
        user_tokens[message.from_user.id]['token'] = token
    else:
        user_tokens[message.from_user.id] = {
            'token': token,
            'is_admin': False
        }

    documents = pipeline.list_documents(token)
    await message.answer(
        f"üîë –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{token}`\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∞—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.\n\n"
        f"üìÇ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n" + "\n".join(f"‚Ä¢  {doc}" for doc in documents),
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['documents']))
async def documents_handler(message: Message, user_tokens, pipeline) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.from_user.id not in user_tokens:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/token`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/token –≤–∞—à_—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    token = user_tokens[message.from_user.id]['token']
    documents = pipeline.list_documents(token)

    if not documents:
        await message.answer("–î–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    await message.answer(
        f"üìÇ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n" + "\n".join(f"‚Ä¢  {doc}" for doc in documents),
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['admin']))
async def admin_handler(message: Message, user_tokens, pipeline) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ:\n"
            "`/admin –≤–∞—à_–ø–∞—Ä–æ–ª—å`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    password = args[1].strip()
    if password != ADMIN_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_tokens[message.from_user.id] = {
        'token': user_tokens.get(message.from_user.id, 'example'),
        'is_admin': True
    }

    await message.answer(
        "üîì –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /shutdown - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞\n"
        "‚Ä¢ –í—Å–µ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['info']))
async def info_handler(message: Message, user_tokens, pipeline) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info - –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = {
        'username': message.from_user.username,
        'full_name': message.from_user.full_name,
        'user_id': user_id,
        'is_admin': False,
        'token': None,
        'documents': []
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if user_id in user_tokens:
        user_data = user_tokens[user_id]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä–æ—Å—Ç–æ —Ç–æ–∫–µ–Ω), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π (—Å–ª–æ–≤–∞—Ä—å)
        if isinstance(user_data, dict):
            user_info['token'] = user_data.get('token')
            user_info['is_admin'] = user_data.get('is_admin', False)
        else:
            user_info['token'] = user_data

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if user_info['token']:
        user_info['documents'] = pipeline.list_documents(user_info['token'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_text = "üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n" + \
        f"üë§ <b>Username:</b> @{user_info['username'] or user_info['full_name']}\n"+ \
        f"üÜî <b>User ID:</b> <code>{user_info['user_id']}</code>\n"+ \
        f"üîë <b>–¢–æ–∫–µ–Ω:</b> <code>{user_info['token'] or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</code>\n"+ \
        f"üõ° <b>–ê–¥–º–∏–Ω:</b> {'‚úÖ –¥–∞' if user_info['is_admin'] else '‚ùå –Ω–µ—Ç'}\n\n"


    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    if user_info['token']:
        token = user_tokens[message.from_user.id]['token']
        documents = pipeline.list_documents(token)

        response_text += f"\nüìÇ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n" + "\n".join(f"‚Ä¢  {doc}" for doc in documents)

    else:
        response_text += "\n‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:\n<code>/token –≤–∞—à_—Ç–æ–∫–µ–Ω</code>"

    await message.answer(
        response_text,
        parse_mode=ParseMode.HTML
    )

@router.message(Command(commands=['shutdown']))
async def shutdown_handler(message: Message, user_tokens) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shutdown –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞."""
    user_data = user_tokens.get(message.from_user.id, {})
    if not user_data.get('is_admin', False):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    await message.answer("üõë –í—ã–∫–ª—é—á–∞—é –±–æ—Ç–∞...")
    raise SystemExit(0)