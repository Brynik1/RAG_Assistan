from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, FSInputFile
import os
from dotenv import load_dotenv
from app.text_utils import TextProcessor

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

router = Router()
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")


@router.message(Command(commands=['start']))
async def start_handler(message: Message, user_states, pipeline):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n"
        "`/token [–≤–∞—à_—Ç–æ–∫–µ–Ω]`\n\n"
        "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.",
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['token']))
async def token_handler(message: Message, user_states, pipeline) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /token —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/token –≤–∞—à_—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    token = args[1].strip()
    if token not in pipeline.document_store.list_user_tokens():
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "`/token –≤–∞—à_—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        user_states.pop(message.from_user.id, None)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id in user_states:
        user_states[message.from_user.id]['token'] = token
    else:
        user_states[message.from_user.id] = {
            'token': token,
            'is_admin': False
        }

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ FileStorage —á–µ—Ä–µ–∑ document_store
    file_storage = pipeline.document_store.file_store

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    documents = pipeline.list_documents(token)

    if not documents:
        await message.answer(
            f"üîë –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{token}`\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞
    await message.answer(
        f"üîë –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{token}`\n\n"
        "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...",
        parse_mode=ParseMode.MARKDOWN
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    for doc_name in documents:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ FileStorage
            file_path = file_storage.get_document_path(token, doc_name)

            await message.answer_document(
                document=FSInputFile(
                    path=file_path,
                    filename=doc_name
                )
            )

        except FileNotFoundError:
            await message.answer(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç {doc_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç {doc_name}: {str(e)}")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    await message.answer(
        "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏!\n\n"
        "–¢–∞–∫ –∫–∞–∫ —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º, –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –ø—Ä—è–º–æ –∑–¥–µ—Å—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "   ‚Ä¢ –ö–∞–∫–æ–≤ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏?\n"
        "   ‚Ä¢ –ì–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—å–≥–æ—Ç–∞—Ö?\n"
        "   ‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å?",
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['token']))
async def token_handler(message: Message, user_states, pipeline) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /token."""
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/token –≤–∞—à_—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    token = args[1].strip()
    if token not in pipeline.document_store.list_user_tokens():
        await message.answer(
            "–í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "`/token –≤–∞—à_—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        user_states.pop(message.from_user.id, None)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if isinstance(user_states.get(message.from_user.id), dict):
        user_states[message.from_user.id]['token'] = token
    else:
        user_states[message.from_user.id] = {
            'token': token,
            'is_admin': False
        }

    documents = pipeline.list_documents(token)
    await message.answer(
        f"üîë –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{token}`\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∞—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.\n\n"
        f"üìÇ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n" + "\n".join(f"‚Ä¢  {doc}" for doc in documents),
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['documents']))
async def documents_handler(message: Message, user_states, pipeline) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.from_user.id not in user_states:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/token`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/token –≤–∞—à_—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    token = user_states[message.from_user.id]['token']
    documents = pipeline.list_documents(token)

    if not documents:
        await message.answer("–î–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    await message.answer(
        f"üìÇ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n" + "\n".join(f"‚Ä¢  {doc}" for doc in documents),
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['admin']))
async def admin_handler(message: Message, user_states, pipeline) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id in user_states and user_states[message.from_user.id]['is_admin']:
        await message.answer("üîì –í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ:\n"
            "`/admin [–≤–∞—à –ø–∞—Ä–æ–ª—å]`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    password = args[1].strip()
    if password != ADMIN_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id in user_states:
        user_states[message.from_user.id]['is_admin'] = True
    else:
        user_states[message.from_user.id] = {
            'token': 'example',
            'is_admin': True
        }

    await message.answer(
        "üîì –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "   ‚Ä¢ /create\_token - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω\n"
        "   ‚Ä¢ /add\_file [—Ç–æ–∫–µ–Ω]- –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫ —Ç–æ–∫–µ–Ω—É\n"
        "   ‚Ä¢ /revoke\_admin - —Å–Ω—è—Ç—å —Å —Å–µ–±—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "   ‚Ä¢ –í—Å–µ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['revoke_admin']))
async def revoke_admin_handler(message: Message, user_states) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in user_states or not user_states[message.from_user.id].get('is_admin', False):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_states[message.from_user.id]['is_admin'] = False

    await message.answer(
        "üîí –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ —Å —Å–µ–±—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/admin –≤–∞—à_–ø–∞—Ä–æ–ª—å`",
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(Command(commands=['info']))
async def info_handler(message: Message, user_states, pipeline) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info - –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = {
        'username': message.from_user.username,
        'full_name': message.from_user.full_name,
        'user_id': user_id,
        'is_admin': False,
        'token': None,
        'documents': []
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if user_id in user_states:
        user_data = user_states[user_id]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä–æ—Å—Ç–æ —Ç–æ–∫–µ–Ω), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π (—Å–ª–æ–≤–∞—Ä—å)
        if isinstance(user_data, dict):
            user_info['token'] = user_data.get('token')
            user_info['is_admin'] = user_data.get('is_admin', False)
        else:
            user_info['token'] = user_data

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if user_info['token']:
        user_info['documents'] = pipeline.list_documents(user_info['token'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_text = "üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n" + \
                    f"üë§ <b>Username:</b> @{user_info['username'] or user_info['full_name']}\n" + \
                    f"üÜî <b>User ID:</b> <code>{user_info['user_id']}</code>\n" + \
                    f"üîë <b>–¢–æ–∫–µ–Ω:</b> <code>{user_info['token'] or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</code>\n" + \
                    f"üõ° <b>–ê–¥–º–∏–Ω:</b> {'‚úÖ –¥–∞' if user_info['is_admin'] else '‚ùå –Ω–µ—Ç'}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    if user_info['token']:
        token = user_states[message.from_user.id]['token']
        documents = pipeline.list_documents(token)

        response_text += f"\nüìÇ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n" + "\n".join(f"‚Ä¢  {doc}" for doc in documents)

    else:
        response_text += "\n‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:\n<code>/token –≤–∞—à_—Ç–æ–∫–µ–Ω</code>"

    await message.answer(
        response_text,
        parse_mode=ParseMode.HTML
    )


@router.message(Command(commands=['create_token']))
async def create_token_handler(message: Message, user_states, pipeline) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_data = user_states.get(message.from_user.id, {})
    if not user_data.get('is_admin', False):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:\n"
            "`/create_token –Ω–æ–≤—ã–π_—Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    token = args[1].strip()
    if token in pipeline.document_store.list_user_tokens():
        await message.answer(f"‚ùå –¢–æ–∫–µ–Ω `{token}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", parse_mode=ParseMode.MARKDOWN)
        return

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    pipeline.document_store.file_store.add_document(token, "__init__.txt", "Initial file")
    pipeline.document_store.vector_store.load_for_user(token)

    await message.answer(f"‚úÖ –¢–æ–∫–µ–Ω `{token}` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", parse_mode=ParseMode.MARKDOWN)


@router.message(Command(commands=['add_file']))
async def add_file_handler(message: Message, user_states, pipeline) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫ —Ç–æ–∫–µ–Ω—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_data = user_states.get(message.from_user.id, {})
    if not user_data.get('is_admin', False):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not message.document:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "`/add_file [—Ç–æ–∫–µ–Ω]`\n\n"
            "–ò –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∫ —Å–æ–æ–±—â–µ–Ω–∏—é\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .docx, .pdf, .txt",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ caption –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    token = None
    if message.caption:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –ø–æ–¥–ø–∏—Å—å—é
        parts = message.caption.split(maxsplit=1)
        if len(parts) > 1 and parts[0] == '/add_file':
            token = parts[1].strip()
    elif message.text:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        parts = message.text.split(maxsplit=1)
        if len(parts) > 1 and parts[0] == '/add_file':
            token = parts[1].strip()

    if not token:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:\n"
            "`/add_file —Ç–æ–∫–µ–Ω`",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    if token not in pipeline.document_store.list_user_tokens():
        await message.answer(f"‚ùå –¢–æ–∫–µ–Ω `{token}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", parse_mode=ParseMode.MARKDOWN)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    if message.media_group_id:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É.", parse_mode=ParseMode.MARKDOWN)
        return
    elif message.document:
        doc = message.document
    else:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", parse_mode=ParseMode.MARKDOWN)
        return

    allowed_extensions = {'.docx', '.pdf', '.txt'}

    file_name = doc.file_name
    file_ext = os.path.splitext(file_name)[1].lower()

    if file_ext not in allowed_extensions:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª `{file_name}`: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç",
                             parse_mode=ParseMode.MARKDOWN)
        return

    try:
        file_path = f"./infrastructure/files/{token}/{file_name}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(file_path):
            await message.answer(f"‚ùå –§–∞–π–ª `{file_name}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç–æ–∫–µ–Ω–∞ `{token}`",
                                 parse_mode=ParseMode.MARKDOWN)
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(doc.file_id)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await message.bot.download_file(file.file_path, file_path)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        text = TextProcessor.extract_text(file_path)
        if not text:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞")

        pipeline.document_store.add_document(token, file_name, text)
        await message.answer(f"‚úÖ –§–∞–π–ª `{file_name}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ `{token}`",
                             parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        if os.path.exists(file_path):
            os.remove(file_path)
